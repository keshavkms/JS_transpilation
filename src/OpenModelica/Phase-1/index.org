#+TITLE: Transpiling OpenModelica Models to JavaScript
#+AUTHOR: Keshav Krihsnamurti
#+DATE: [2017-06-15 THU]
#+PROPERTY: results output
#+PROPERTY: exports code
#+SETUPFILE: ../org-templates/level-1.org 

* Phase 1 - Converting C to JavaScript
C ( or rather =clang= generated llvm ) can be converted to javascript with the
help of emscripten
** Emscripten Description
Emscripten allows for virtually zero hassle-porting of c to javascript.
It has few limitations though
*** Emscripten Limitations
**** Code that is multi-threaded and uses shared state.
JavaScript is single threaded but it emulates multi threading  (webworkers),
but they cannot share state Å\ instead they pass messages.
**** Code that relies on x86 alignment behavior.
 x86 allows unaligned reads and writes (so for example you can read a 16-bit
value from a non-even address), but other architectures do not (ARM will raise
SIGILL).
For Emscripten-generated JavaScript the behavior is undefined. 
**** Code that uses low-level features of the native environment.
for example native stack manipulation in conjunction with setjmp/longjmp (it
supports proper setjmp/longjmp,i.e., jumping down the stack,
but not jumping up to an unwound stack, which is undefined behavior).
*** Code that compiles but might run slowly 
**** 64-bit int variables.
Mathematical operations (+, -, *, /) are slow because they are emulated
(bitwise operations are reasonably fast).
JavaScript does not have a native 64-bit int type so this is unavoidable.
**** C++ Exceptions.
In JavaScript such code generally makes the JavaScript engine turn off various
optimizations. For that reason exceptions are turned off by default in -O1 and
above.
To re-enable them, run =emcc -s DISABLE_EXCEPTION_CATCHING=0= (see
src/settings.js).
*** API Limitations
The browser environment and JavaScript are different from the native
environments that C and C++ typically run in.
These differences impose some limitations on how native APIs can be called and
used.
**** Networking.
Emscripten supports libc networking functions but you must limit yourself to
asynchronous (non-blocking) operations. This is required because the underlying
JavaScript networking functions are asynchronous.
**** File Systems.
Emscripten supports libc file system functions and C/C++ code can be written in the normal way.
Code run in a browser environment is sandboxed, and does not have direct access
to the local file system. Instead, Emscripten creates a virtual file system
that may be preloaded with data or linked to URLs for lazy loading. This
affects when synchronous file system functions can be called and how a project
is compiled. 
**** Application Main Loop.
The browser event model uses co-operative multitasking Å\ each event has a
ÅgturnÅh to run, and must then return control to the browser event loop so that
other events can be processed. A common cause of HTML pages hanging is
JavaScript that does not complete and return control to the browser.
** Emscripten Examples
Here are a few examples to demonstrate emscripten 
*** A simple hello world example
Hello World!    
#+NAME hello_world
#+BEGIN_SRC c

#include<stdio.h>
 
int main() {
printf("Hello People!\n");
return 0;
}

#+END_SRC

Corresponding compilation code 
=emcc hello_world.c -o hello_world.html=
*** A simple hello world with custom input 
A hello world program that asks you for your name

#+NAME hello_world_name
#+BEGIN_SRC c
#include<stdio.h>

int main() {

char name[20];
scanf("%s\n",name);
printf("hello %s\n",name);

return 0;
}

#+END_SRC

command to compile the source :
=emcc hello_world_name.c -o hello_world_test.html=
*** A simple graphics Demonstration
We'll draw a simple cube on the screen
#+NAME graphics
#+BEGIN_SRC c

#include <stdio.h>
#include <SDL/SDL.h>

#ifdef __EMSCRIPTEN__
#include <emscripten.h>
#endif

int main(int argc, char** argv) {
  printf("hello, world!\n");

  SDL_Init(SDL_INIT_VIDEO);
  SDL_Surface *screen = SDL_SetVideoMode(256, 256, 32, SDL_SWSURFACE);

#ifdef TEST_SDL_LOCK_OPTS
  EM_ASM("SDL.defaults.copyOnLock = false; SDL.defaults.discardOnLock = true; SDL.defaults.opaqueFrontBuffer = false;");
#endif

  if (SDL_MUSTLOCK(screen)) SDL_LockSurface(screen);
  for (int i = 0; i < 256; i++) {
    for (int j = 0; j < 256; j++) {
#ifdef TEST_SDL_LOCK_OPTS
      // Alpha behaves like in the browser, so write proper opaque pixels.
      int alpha = 255;
#else
      // To emulate native behavior with blitting to screen, alpha component is ignored. Test that it is so by outputting
      // data (and testing that it does get discarded)
      int alpha = (i+j) % 255;
#endif
      *((Uint32*)screen->pixels + i * 256 + j) = SDL_MapRGBA(screen->format, i, j, 255-i, alpha);
    }
  }
  if (SDL_MUSTLOCK(screen)) SDL_UnlockSurface(screen);
  SDL_Flip(screen);

  printf("you should see a smoothly-colored square - no sharp lines but the square borders!\n");
  printf("and here is some text that should be HTML-friendly: amp: |&| double-quote: |\"| quote: |'| less-than, greater-than, html-like tags: |<cheez></cheez>|\nanother line.\n");

  SDL_Quit();

  return 0;
}

#+END_SRC

code to compile it in c:
=gcc graphics.c -lSDL=

code to compile it in JavaScript:
=emcc graphics.c -o graphics.html=
*** A simple program to read from a file
** tangling code
#+BEGIN_SRC c :eval no :noweb yes :tangle hello_world.c
<<hello_world>> 
#+END_SRC

#+BEGIN_SRC c :eval no :noweb yes :tangle hello_world_name.c
<<hello_world_name>> 
#+END_SRC

#+BEGIN_SRC c :eval no :noweb yes :tangle graphics.c
<<graphics>> 
#+END_SRC
